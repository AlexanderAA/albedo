import React from 'react'
import PropTypes from 'prop-types'
import {observer} from 'mobx-react'
import {authenticator} from 'otplib'
import QR from 'qrcode.react'

authenticator.options = {
    window: 1
}

const authApps = [
    {
        name: 'Google Authenticator',
        link: 'https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2'
    },
    {
        name: 'Authy',
        link: 'https://authy.com/download/'
    },
    {
        name: 'Free OTP',
        link: 'https://freeotp.github.io/'
    }
]

function isMobile() {
    return (window.navigator.maxTouchPoints || 'ontouchstart' in document) && window.screen.width * window.screen.height < 1000000
}

@observer
class SetupTotpView extends React.Component {
    constructor(props) {
        super(props)
        const totpSecret = authenticator.generateSecret()
        this.state = {
            step: 1,
            totpSecret,
            totp: null,
            otplink: authenticator.keyuri(props.email, 'Albedo', totpSecret),
            error: null,
            totpSecretBackedUp: false
        }
    }

    static propTypes = {
        email: PropTypes.string.isRequired,
        onConfirm: PropTypes.func.isRequired
    }

    nextStep() {
        const {step, totp, totpSecret, error} = this.state
        if (error) return
        if (step < 4) return this.setState({step: step + 1})
        this.props.onConfirm({totpSecret, totp})
    }

    confirmTotp(value) {
        this.setState({totp: value.replace(/\D/g, ''), error: null}, () => {
            const {totp, step, totpSecret} = this.state
            if (totp.length === 6) {
                if (authenticator.check(totp, totpSecret)) {
                    this.setState({step: step + 1, error: null})
                } else {
                    this.setState({error: 'Invalid authenticator code'})
                }
            }
        })
    }

    renderSection() {
        switch (this.state.step) {
            case 1:
                return <div className="section">
                    Download and install authenticator app for your phone.<br/>
                    You can use one of those:
                    <div className="space">
                        {[authApps.map(({name, link}, i) => <p key={i} className="text-center">{' '}
                            <a href={link} target="_blank">{name}</a>
                        </p>)]}
                    </div>
                    <div className="text-small dimmed">
                        2-step verification provides stronger security for your account.
                        To access the account you'll need a password and code generated by the authenticator app on your
                        phone.
                    </div>
                </div>
            case 2:
                return <div className="section">
                    <p>
                        Please write down this 2FA backup code and save it somewhere in the safe place.
                        You will need it to restore access to your account in case if your phone is lost or broken.
                    </p>
                    <div className="text-center space">{this.state.totpSecret}</div>
                    <div className="space">
                        <label>
                            <input type="checkbox" onChange={e => this.setState({totpSecretBackedUp: true})}
                                   checked={this.state.totpSecretBackedUp}/> I backed up 2FA secret
                        </label>
                    </div>

                </div>
            case 3:
                return <div className="section">
                    Launch the authenticator, select "Scan a barcode" option, and use your phone's camera to scan
                    this barcode.
                    <div className="text-center">
                        <QR value={this.state.otplink} level="Q" size={160} fgColor="#141414"/>
                        <div className="space dimmed text-small">
                            Or add the code manually
                        </div>
                        <a href={this.state.otplink} target="_blank">{this.state.totpSecret}</a>
                        {isMobile() && <div className="space dimmed text-small">
                            If you installed authenticator on this device, just click a link above.
                        </div>}
                    </div>
                </div>
            case 4:
                return <div className="section">
                    Once you have scanned the barcode, enter a 6-digit verification code generated by the
                    authenticator app.
                    <div className="text-center space">
                        <input type="text" maxLength={6} className="text-center" autoFocus
                               style={{width: '7em', letterSpacing: '0.2em', fontWeight: 'bold'}}
                               onChange={e => this.confirmTotp(e.target.value)}/>
                    </div>
                </div>
        }
    }

    render() {
        const {error, step} = this.state
        return <div>
            <h3>Set up two-factor authentication</h3>
            <div className="space"/>
            {this.renderSection()}
            <div className="actions space row">
                <div className="column column-50">
                    <button className="button button-block" onClick={e => this.nextStep()}>Next</button>
                </div>
                {step < 4 && <div className="column column-50">
                    <a href="/" className="button button-outline button-block">Cancel</a>
                </div>}
            </div>
            {!!error && <div className="error space">Error: {error}</div>}
        </div>
    }
}

export default SetupTotpView