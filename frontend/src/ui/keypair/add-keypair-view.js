import React from 'react'
import PropTypes from 'prop-types'
import {observer} from 'mobx-react'
import {StrKey, Keypair} from 'stellar-base'
import actionContext from '../../state/action-context'
import accountManager from '../../state/account-manager'
import AccountKeypair from '../../state/account-keypair'
import authorizationService from '../../state/authorization'
import errors from '../../util/errors'
import {formatAddress} from '../../util/formatter'
import {CopyToClipboard} from 'react-copy-to-clipboard'
import notificationService from '../../state/notifications'
import Dropdown from '../components/dropdown'

@observer
class AddKeypairView extends React.Component {
    constructor(props) {
        super(props)
        const newKeypair = Keypair.random()
        this.state = {
            secret: '',
            importMode: false,
            friendlyName: '',
            isValid: true,
            error: null,
            autoGeneratedSecret: newKeypair.secret()
        }
    }

    static propTypes = {
        keypair: PropTypes.instanceOf(AccountKeypair)
    }

    changeSecretValue(secret = '') {
        this.setState({
            secret,
            isValid: !secret || StrKey.isValidEd25519SecretSeed(secret),
            error: null
        })
    }

    onFinish() {
        //notificationService.showNotification()
        if (!actionContext.intent) {
            __history.push('/account')
        } else {
            __history.push('/confirm')
        }
    }

    async confirm() {
        const {friendlyName, secret, autoGeneratedSecret, isValid} = this.state,
            {activeAccount} = accountManager,
            sk = secret || autoGeneratedSecret

        if (!isValid) return this.setState({error: !sk ? errors.emptySecretKey : errors.invalidSecretKey})

        try {
            //request user confirmation
            const credentials = await authorizationService.requestAuthorization(activeAccount)
            //fetch fresh data from the server to minimize collisions possibility
            await activeAccount.load(credentials)
            //get sensitive keypairs data
            const sensitiveData = activeAccount.requestSensitiveData(credentials)
            //add/modify a keypair
            sensitiveData.addOrUpdateKeypair({secret: sk, friendlyName})
            //update the data
            await activeAccount.updateSensitiveData(credentials, sensitiveData)
            //save account on the server and in browser
            await activeAccount.save(credentials)

            this.onFinish()
        } catch (err) {
            console.error(err)
            alert(err.message)
        }
    }

    onKeyDown(e) {
        if (e.keyCode === 13) return this.confirm()
        if (e.keyCode === 27) return this.onFinish()
    }

    render() {
        const {activeAccount} = accountManager
        if (!activeAccount) {
            this.onFinish()
            return null
        }
        const {friendlyName, secret, autoGeneratedSecret, isValid, error, importMode = false} = this.state,
            autoGeneratedPublicKey = Keypair.fromSecret(autoGeneratedSecret).publicKey()

        const options = [
            {value: 'new', title: 'Generate new signing key'},
            {value: 'import', title: 'Import existing signing key'}
        ]

        return <div className="keypair-editor">
            <h2>Add new signing key to account <a href="/account">{activeAccount.displayName}</a></h2>
            <div className="space">
                <Dropdown options={options} onChange={mode => this.setState({importMode: mode === 'import'})}
                          value={importMode ? 'import' : 'new'}/>
            </div>
            {importMode && <div className="space">
                <input placeholder="Stellar secret key (56 chars, starts with 'S')" value={secret || ''}
                       onFocus={e => e.target.select()} onChange={e => this.changeSecretValue(e.target.value)}
                       onKeyDown={e => this.onKeyDown(e)}/>
                {!!secret &&
                <div className="dimmed text-small word-break">
                    {isValid ? <>
                        <span className="dimmed">Public key: </span>{Keypair.fromSecret(secret).publicKey()}
                    </> : <span className="dimmed">(invalid secret key)</span>}
                </div>
                }
            </div>}
            {!importMode && <div className="space word-break text-small">
                <span className="dimmed">Public key: </span>{autoGeneratedPublicKey}
                <CopyToClipboard text={autoGeneratedPublicKey}>
                    <a href="#" className="fa fa-copy active-icon" title="Copy public key to clipboard"
                       style={{fontSize: '0.8em'}}/>
                </CopyToClipboard>

                <div className="space"/>
                <span className="dimmed">Secret key: </span>{formatAddress(autoGeneratedSecret, 12)}
                <CopyToClipboard text={autoGeneratedSecret}>
                    <a href="#" className="fa fa-copy active-icon" title="Copy secret key to clipboard"
                       style={{fontSize: '0.8em'}}/>
                </CopyToClipboard>
            </div>}

            <div className="space">
                Display name for this keypair (optional):<br/>
                <input type="text" value={friendlyName || ''} maxLength={40}
                       placeholder="Like 'Primary' or 'Cold wallet'"
                       onChange={e => this.setState({friendlyName: e.target.value})}
                       onKeyDown={e => this.onKeyDown(e)}/>
            </div>
            <div className="actions space">
                <button onClick={_ => this.confirm()} className="button stackable"
                        disabled={!importMode && !isValid}>Save
                </button>
                {' '}
                <button onClick={_ => this.onFinish()} className="button stackable button-outline">Cancel</button>
            </div>
            {error && <div className="alert space">
                <i className="fa fa-warning"/> {error.message}
            </div>}
            <div className="dimmed text-small space">
                Stellar key pair is a combination of public and secret keys used to control accounts access.
                For an account to perform a transaction – e.g., make a payment – the transaction must be signed by the
                private key that corresponds to that account’s public key.
                <br/>
                Note: We have no access to your secret key, the data is securely encrypted in your browser.
            </div>
        </div>
    }
}

export default AddKeypairView
